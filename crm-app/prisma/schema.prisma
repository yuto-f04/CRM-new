generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IssueStatus {
  TO_DO
  IN_PROGRESS
  IN_REVIEW
  BLOCKED
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueType {
  TASK
  BUG
  FEATURE
}

enum SprintStatus {
  PLANNED
  ACTIVE
  CLOSED
}

enum CaseStage {
  LEAD
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

model users {
  id              String             @id @default(cuid())
  email           String             @unique
  name            String?
  password_hash   String?
  role            String             @default("member")
  is_active       Boolean            @default(true)
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  project_members project_members[]
  projects_owned  projects[]         @relation("ProjectOwner")
  accounts_owned  accounts[]         @relation("AccountOwner")
  contacts_owned  contacts[]         @relation("ContactOwner")
  cases_owned     cases[]            @relation("CaseOwner")
  issues_reported issues[]           @relation("IssueReporter")
  issue_assignments issue_assignees[]
}

model projects {
  id           String    @id @default(cuid())
  name         String
  key          String    @unique
  description  String?
  owner_id     String?
  account_id   String?
  start_date   DateTime?
  end_date     DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  owner        users?    @relation("ProjectOwner", fields: [owner_id], references: [id], onDelete: Cascade)
  account      accounts? @relation("ProjectAccount", fields: [account_id], references: [id], onDelete: Cascade)
  members      project_members[]
  issues       issues[]
  sprints      sprints[]
  cases_deals  cases[]   @relation("CaseProject")

  @@index([owner_id])
  @@index([account_id])
}

model project_members {
  id          String   @id @default(cuid())
  project_id  String
  user_id     String
  role        String   @default("member")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  project     projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([project_id, user_id])
  @@index([project_id])
  @@index([user_id])
}

model issues {
  id           String        @id @default(cuid())
  project_id   String
  reporter_id  String?
  title        String
  description  String?
  status       IssueStatus   @default(TO_DO)
  priority     IssuePriority @default(MEDIUM)
  type         IssueType     @default(TASK)
  due_date     DateTime?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  project      projects      @relation(fields: [project_id], references: [id], onDelete: Cascade)
  reporter     users?        @relation("IssueReporter", fields: [reporter_id], references: [id], onDelete: Cascade)
  sprints      issue_sprint[]
  assignees    issue_assignees[]
  cases        cases[]       @relation("CaseIssue")

  @@index([project_id])
  @@index([reporter_id])
  @@index([status])
  @@index([priority])
}

model sprints {
  id          String       @id @default(cuid())
  project_id  String
  name        String
  goal        String?
  status      SprintStatus @default(PLANNED)
  start_date  DateTime?
  end_date    DateTime?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  project     projects     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  issues      issue_sprint[]

  @@index([project_id])
  @@index([status])
}

model issue_sprint {
  id         String   @id @default(cuid())
  issue_id   String
  sprint_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  issue      issues   @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  sprint     sprints  @relation(fields: [sprint_id], references: [id], onDelete: Cascade)

  @@unique([issue_id, sprint_id])
  @@index([issue_id])
  @@index([sprint_id])
}

model issue_assignees {
  id         String   @id @default(cuid())
  issue_id   String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  issue      issues   @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([issue_id, user_id])
  @@index([issue_id])
  @@index([user_id])
}

model accounts {
  id         String    @id @default(cuid())
  name       String
  industry   String?
  website    String?
  phone      String?
  owner_id   String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  owner      users?    @relation("AccountOwner", fields: [owner_id], references: [id], onDelete: Cascade)
  projects   projects[] @relation("ProjectAccount")
  contacts   contacts[] @relation("ContactAccount")
  cases      cases[]    @relation("CaseAccount")

  @@unique([name])
  @@index([owner_id])
}

model contacts {
  id          String    @id @default(cuid())
  account_id  String?
  owner_id    String?
  first_name  String
  last_name   String
  email       String?
  phone       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  account     accounts? @relation("ContactAccount", fields: [account_id], references: [id], onDelete: Cascade)
  owner       users?    @relation("ContactOwner", fields: [owner_id], references: [id], onDelete: Cascade)
  cases       cases[]   @relation("CaseContact")

  @@index([account_id])
  @@index([owner_id])
  @@unique([email])
}

model cases {
  id          String    @id @default(cuid())
  account_id  String?
  contact_id  String?
  owner_id    String?
  issue_id    String?
  project_id  String?
  title       String
  description String?
  stage       CaseStage @default(LEAD)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  account     accounts? @relation("CaseAccount", fields: [account_id], references: [id], onDelete: Cascade)
  contact     contacts? @relation("CaseContact", fields: [contact_id], references: [id], onDelete: Cascade)
  owner       users?    @relation("CaseOwner", fields: [owner_id], references: [id], onDelete: Cascade)
  issue       issues?   @relation("CaseIssue", fields: [issue_id], references: [id], onDelete: Cascade)
  project     projects? @relation("CaseProject", fields: [project_id], references: [id], onDelete: Cascade)

  @@index([account_id])
  @@index([contact_id])
  @@index([owner_id])
  @@index([stage])
  @@index([issue_id])
  @@index([project_id])
}
